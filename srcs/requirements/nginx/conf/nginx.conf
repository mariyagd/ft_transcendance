events {
    worker_connections 1024;
}

http {
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 80 default_server;
        server_name ${DOMAIN_NAME};

        # This code listens on port 80 (HTTP) and when a request is received,
        # it returns a 301 redirect to the same URL but with the HTTPS scheme.
        # The $host variable contains the hostname of the requested URL,
        # and the $request_uri variable contains the rest of the requested URL.
        # $scheme contains the scheme of the received request (http or https).
        # The if statement redirects only http requests to https
        if ($scheme != "https") {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl default_server;
        server_name ${DOMAIN_NAME};
        ssl_certificate /etc/nginx/certs/nginx.crt;
        ssl_certificate_key /etc/nginx/certs/nginx.key;
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Define the root path for all site files: statics files and media
        root ${SITE_PATH}/static;
        index index.html;

        location /media/ {
            alias ${SITE_PATH}/media/;
        }

        location /static/ {
            alias ${SITE_PATH}/static/;
        }

        # Serve static files from the root folder which is ${SITE_PATH}
        location / {
            try_files $uri $uri/ =404;
        }

        location /api/ {

            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # if the request is for the API, it is redirected to the auth service
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            proxy_pass http://auth:8000;

            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # $host is the hostname of the requested URL
            # e.g. if the request is for http://example.com/api/, $host is example.com
            # nginx sends the original host header to the proxied server
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            proxy_set_header Host $host;

            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # $remote_addr is a variable that contains the IP address of the client
            # X-Real-IP is a header that contains ONLY the IP address of the client, contrary to the X-Forwarded-For header
            # which may contain a list of IP addresses if the request has passed through multiple proxies
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            proxy_set_header X-Real-IP $remote_addr;

            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # X-Forwarded-For: identifying the originating IP address of a client connecting to a web server through a proxy server.
            # When a client connects directly to a server, the client's IP address is sent to the server (and is often written to server access logs).
            # But if a client connection passes through any forward or reverse proxies, the server only sees the final proxy's IP address, which is often of little use.
            # This header directive sends to Django the client's IP and a serie of IP addresses that trace the path of the request through various proxies.
            # the client’s IP address is preserved in the X-Forwarded-For header. The server can then extract the client’s IP address from the X-Forwarded-For header.
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # X-Forwarded-Proto: header for identifying the protocol (HTTP or HTTPS) that a client used to connect to your proxy (nginx) or load balancer.
            # If a client connects to your proxy using HTTPS, but your proxy then forwards the request to your server using HTTP,
            # the X-Forwarded-Proto header allows your server (django) to know that the client used HTTPS. If django knows what was the original http connection,
            # he can decide to redirect the request or not.
            # Later in Django settings.py we set SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') which tells Django to trust the X-Forwarded-Proto header.
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # Check SECURE_PROXY_SSL_HEADER warnings in: https://docs.djangoproject.com/fr/5.1/ref/settings/#std-setting-SECURE_PROXY_SSL_HEADER
            # It has three requirements:
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # Requirement 1: Your Django app is behind a proxy.
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # Requirement 2: The proxy must remove any X-Forwarded-Proto header that the client sends.
            # To use SECURE_PROXY_SSL_HEADER in Django settings.py, nginx must delete all X-Forwarded-Proto headers of all incoming requests
            # even when it contains a comma-separated list of protocols. This is done by setting the X-Forwarded-Proto header to an empty string.
            # A hacker could manipulate the X-Forwarded-Proto header to make Django think that the request was made using HTTPS, even if it was made using HTTP.
            # For example the hacker could send a request with the header X-Forwarded-Proto: https,http. Django would trust the header and think that the request was made using HTTPS.
            # By setting the X-Forwarded-Proto header to an empty string, we delete all existing values and we prevent the hacker from manipulating the header.
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # Requirement 3: Your proxy sets the X-Forwarded-Proto header and sends it to Django, but only for requests that originally come in via HTTPS.
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------

            proxy_set_header X-Forwarded-Proto https;

            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            # If the client sends an Authorization header, it is sent to the proxied server (Django)
            # For example when the client sends a request to the API with a token in the Authorization header like
            # Authorization: Bearer <token>, the token is sent to Django. Then Django can verify the token and authenticate the user.
            # $http_authorization is a variable that contains the value of the Authorization header
            # Authorization transmits authentication information like tokens from the client to the Backend (django) via nginx
            #--------------------------------------------------------------------------------------------------------------------------------------------------------------------
            proxy_set_header Authorization $http_authorization;
        }
    }
}

